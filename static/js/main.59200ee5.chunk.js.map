{"version":3,"sources":["components/Timer/index.js","components/Results/index.js","App.js","index.js"],"names":["Timer","props","useState","seconds","setSeconds","minutes","setMinutes","useEffect","prev","setTimeout","updateSeconds","toLocaleString","minimumIntegerDigits","useGrouping","Results","cpm","maxWords","acc","animatedCpm","setAnimatedCpm","animatedMaxWords","setAnimatedMaxWords","animatedAcc","setAnimatedAcc","ProgressCircle","number","text","maxNumber","width","height","transform","fill","stroke","result","proporcional","toProgressionColor","strokeWidth","d","strokeDasharray","strokeDashoffset","toPathOffset","x","y","dominantBaseline","textAnchor","ResultText","animate","arg","func","max","setInterval","clearInterval","className","style","fontSize","paddingTop","opacity","App","word","setWord","matched","setMatched","inputValue","setInputValue","totalWords","setTotalWords","keyStrokes","setKeyStrokes","rightKeyStrokes","setRightKeyStrokes","getNewWord","index","Math","floor","random","wordsList","length","toLowerCase","firstWord","toFixed","autoComplete","name","type","autoFocus","onChange","e","target","value","inputKeys","key","newWord","slice","handleSpellcheck","map","idx","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.59200ee5.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\r\n\r\nexport default function Timer (props) {\r\n\r\n  const [seconds, setSeconds] = useState(0);\r\n  const [minutes, setMinutes] = useState(0);\r\n\r\n  useEffect(() => {\r\n    if (seconds === 60){\r\n      setSeconds(0);\r\n      setMinutes(prev => prev + 1)\r\n    } else {      \r\n        setTimeout(() => {\r\n          setSeconds(prev => prev + 1)\r\n        }, 1000);\r\n    }\r\n    props.updateSeconds(seconds);\r\n  // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [seconds])\r\n\r\n  return (\r\n    <p> {\r\n    minutes.toLocaleString('en-US', {\r\n      minimumIntegerDigits: 2,\r\n      useGrouping: false\r\n    })\r\n    + \":\" +\r\n    seconds.toLocaleString('en-US', {\r\n      minimumIntegerDigits: 2,\r\n      useGrouping: false\r\n    })} </p>\r\n  )\r\n}","import { useState, useEffect } from \"react\";\r\n\r\nexport default function Results ({cpm, maxWords, acc }) {\r\n\r\n  const [animatedCpm, setAnimatedCpm] = useState(0);\r\n  const [animatedMaxWords, setAnimatedMaxWords] = useState(0);\r\n  const [animatedAcc, setAnimatedAcc] = useState(0);\r\n\r\n\r\n  const ProgressCircle = ({number, text, maxNumber = 100}) => { \r\n\r\n    // Normalize number in a 0 to 1 scale and convert it to the respective *strokeDashoffset*\r\n    // 472 is a magic number achieved by testing\r\n    function toPathOffset (number, maxNumber) {\r\n      let result;\r\n      let proporcional = number/maxNumber;\r\n\r\n      if(number > maxNumber) {\r\n        return 472;\r\n      }\r\n      \r\n      if(number < 0 || null) {\r\n        return 0;\r\n      }\r\n      \r\n      result = proporcional*472;\r\n\r\n      return result\r\n    }\r\n\r\n    // Normalize number in a 0 to 1 scale and convert it to its respective RGB color\r\n    // being 0% red, 50% yellow and 100% green\r\n    function toProgressionColor (number, maxNumber) {\r\n      let result;\r\n      let proporcional = number/maxNumber;\r\n      \r\n      if(proporcional <= 0.5){\r\n        result = `rgb(\r\n          ${255},\r\n          ${2*proporcional*255},\r\n          0)`;\r\n      }\r\n      \r\n      if(proporcional > 0.5){\r\n        result = `rgb(\r\n          ${((1-proporcional)*2*255)},\r\n          ${255},\r\n          0)`;\r\n      }\r\n\r\n      return result\r\n    }\r\n\r\n    return (\r\n      <svg width=\"200\" height=\"200\">      \r\n        <g transform-origin=\"center\" transform=\" rotate(-90)\" >\r\n          <path fill=\"none\" stroke={toProgressionColor (number, maxNumber)} strokeWidth=\"1rem\"\r\n          d=\"M 175, 100 a75,75 0 1,1 0,-.00001\"\r\n          />\r\n          <path fill=\"none\" stroke=\"#e1e1e1\" strokeWidth=\"1rem\"\r\n          strokeDasharray=\"472\" strokeDashoffset={`${toPathOffset(number, maxNumber)}`}\r\n          d=\"M 175, 100 a75,75 0 1,1 0,-.00001\"\r\n          />\r\n        </g>\r\n        <text x=\"50%\" y=\"50%\" fill=\"#e1e1e1\" dominantBaseline=\"central\" textAnchor=\"middle\"> {number} <br/> {text}</text>        \r\n      </svg>\r\n    )\r\n  }\r\n\r\n  const ResultText = () => {\r\n    let text;\r\n\r\n    if(maxWords <= 35) {\r\n      text = \"There's definitely room for improvement. Your typing speed is below average.\"\r\n    }\r\n    if(maxWords > 35 && maxWords <= 45 ) {\r\n      text = \"Not bad, your typing speed is average.\"\r\n    }\r\n    if(maxWords > 45 && maxWords <= 59 ) {\r\n      text = \"Congratulations! Your typing speed is above average.\"\r\n    }\r\n    if(maxWords > 59 && maxWords <= 79 ) {\r\n      text = \"You sure can type! At this speed you could be a professional typist.\"\r\n    }\r\n    if(maxWords > 79 ) {\r\n      text = \"You're really good at typing! Keyboard go VROOOM\"\r\n    }\r\n\r\n    return <p> <br/> {text} </p>\r\n    \r\n  }\r\n\r\n\r\n  useEffect(() => {\r\n    animate((arg) => setAnimatedCpm(arg), cpm);\r\n    animate((arg) => setAnimatedMaxWords(arg), maxWords);\r\n    animate((arg) => setAnimatedAcc(arg), acc);\r\n  },[acc, cpm, maxWords])\r\n\r\n  const animate = (func, max) => {    \r\n      setInterval(() => {               \r\n        func(prev => { \r\n          if(prev >= max) {\r\n            clearInterval();\r\n            return max\r\n          }else return prev + 1\r\n        });          \r\n      }, 20);   \r\n  }\r\n\r\n  return (\r\n    <div className=\"container\">\r\n\r\n      <div className=\"results\">        \r\n        <ProgressCircle number={animatedCpm} text=\"CPM\" maxNumber={475} />\r\n        <ProgressCircle number={animatedMaxWords} text=\"WPM\"/>\r\n        <ProgressCircle number={animatedAcc} text=\"% ACC\"/>\r\n      </div>\r\n\r\n      <div>\r\n        <p style={{fontSize:\"2rem\"}}>\r\n          <br/> You typed {maxWords} {maxWords === 1 ? \"word\" : \"words\"} in a minute!\r\n        </p>\r\n        \r\n        <ResultText />     \r\n      </div>\r\n\r\n      <div style={{paddingTop:\"6em\", opacity:\"0.5\"}}>        \r\n        <p> The average typing speed is around 40 words per minute or 175 characters per minute. </p>\r\n        <br />\r\n        <p> Around 65 words per minute or 325 characters per minute is the desired typing speed for high productivity. </p>\r\n      </div>\r\n\r\n    </div>\r\n  )\r\n}","import React, { useEffect, useState } from 'react';\r\n\r\nimport wordsList from './services/words.json';\r\nimport Timer from './components/Timer';\r\nimport Results from './components/Results';\r\n\r\nexport default function App () {\r\n  \r\n  const [word, setWord] = useState(\"\");\r\n  const [matched, setMatched] = useState(\"\");\r\n  const [inputValue, setInputValue] = useState(\"\");\r\n  const [totalWords, setTotalWords] = useState([]);\r\n  const [keyStrokes, setKeyStrokes] = useState(0);\r\n  const [rightKeyStrokes, setRightKeyStrokes] = useState(0);\r\n  const [seconds, setSeconds] = useState(0);\r\n  \r\n  const getNewWord = () => {\r\n    const index = Math.floor(Math.random() * (wordsList.length-1));\r\n\r\n    return wordsList[index].toLowerCase();\r\n    \r\n  }\r\n\r\n  const handleSpellcheck = (inputKeys) => {\r\n    const key = inputKeys[inputKeys.length-1];\r\n    setKeyStrokes(prev => prev + 1);\r\n    \r\n    if( key !== word[0] ) return null\r\n    \r\n    if( key === word[0] ) {\r\n      const newWord = getNewWord();\r\n      setRightKeyStrokes(prev => prev + 1)\r\n\r\n      setMatched(prev => [...prev, key]);\r\n\r\n      setWord(prev => {\r\n        if(prev.length > 1) {\r\n          return prev.slice(1)\r\n        } else {\r\n          setMatched([]);\r\n          setTotalWords( prev => {\r\n            if(newWord !== prev[0]) {              \r\n              return [newWord, ...prev]\r\n            } else return [...prev];\r\n          });   \r\n          return newWord         \r\n        }\r\n      });   \r\n\r\n    }\r\n\r\n  }\r\n\r\n  useEffect(() => {\r\n    const firstWord = getNewWord();\r\n    setWord(firstWord);\r\n    setTotalWords( [firstWord] );\r\n    setInputValue(\"\");\r\n  },[])\r\n\r\n  if(seconds === 60){\r\n    return <Results cpm={keyStrokes} maxWords={totalWords.length-1} acc={`${(rightKeyStrokes/keyStrokes*100).toFixed()}`} />\r\n  }\r\n\r\n  return (\r\n    <div className=\"container\">\r\n\r\n      <div>\r\n        {keyStrokes === 0 ? \"Start Typing\" : <Timer updateSeconds={arg => setSeconds(arg)} />}\r\n      </div>\r\n    \r\n      <div className=\"validKeys\">\r\n        <span className=\"matched\">\r\n          {matched}\r\n        </span>\r\n\r\n        <span className=\"remainder\">\r\n          {word}\r\n        </span>\r\n      </div>\r\n\r\n      <input className=\"typedKeys\"\r\n        autoComplete=\"off\" name=\"hidden\" type=\"text\" autoFocus={true}\r\n        onChange={ e => {setInputValue(e.target.value); handleSpellcheck(e.target.value);} }\r\n        value={inputValue}>\r\n      </input>\r\n\r\n      <div className=\"completedWords\">        \r\n        \r\n          {totalWords.map((word, idx) =>\r\n            <p key={idx}>\r\n              {`${totalWords.length-idx}. ${word}`}\r\n            </p>        \r\n          )}\r\n              \r\n      </div>\r\n    \r\n\r\n    </div>\r\n  )\r\n\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}